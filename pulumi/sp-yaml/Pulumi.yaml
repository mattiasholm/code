name: sp-yaml
runtime: yaml
options:
  refresh: always

config:
  name:
    type: string
  api:
    type: string
  permission:
    type: string
  roleId:
    type: string
  secretName:
    type: string
  secretExpiration:
    type: integer
    default: 8760
  secretVersion:
    type: integer
    default: 1
  audience:
    type: string
  issuer:
    type: string
  repo:
    type: string

variables:
  user:
    fn::invoke:
      function: azuread:getClientConfig

  subscription:
    fn::invoke:
      function: azure-native:authorization:getClientConfig

  roleDefinition:
    fn::invoke:
      function: azure-native:authorization:getRoleDefinition
      arguments:
        roleDefinitionId: ${roleId}
        scope: /subscriptions/${subscription.subscriptionId}

resources:
  app:
    type: azuread:Application
    properties:
      displayName: ${name}
      owners:
        - ${user.objectId}
      requiredResourceAccesses:
        - resourceAppId: ${api}
          resourceAccesses:
            - id: ${permission}
              type: Role

  sp:
    type: azuread:ServicePrincipal
    properties:
      applicationId: ${app.applicationId}
      owners:
        - ${user.objectId}

  role:
    type: azure-native:authorization:RoleAssignment
    properties:
      principalId: ${sp.objectId}
      principalType: ServicePrincipal
      roleDefinitionId: ${roleDefinition.id}
      scope: /subscriptions/${subscription.subscriptionId}

  secret:
    type: azuread:ApplicationPassword
    properties:
      displayName: ${secretName}
      applicationObjectId: ${app.objectId}
      endDateRelative: ${secretExpiration}h
      rotateWhenChanged:
        rotation: v${secretVersion}

  main:
    type: azuread:ApplicationFederatedIdentityCredential
    properties:
      displayName: main
      applicationObjectId: ${app.objectId}
      audiences:
        - ${audience}
      issuer: ${issuer}
      subject: repo:${repo}:ref:refs/heads/main

  pull_request:
    type: azuread:ApplicationFederatedIdentityCredential
    properties:
      displayName: pull_request
      applicationObjectId: ${app.objectId}
      audiences:
        - ${audience}
      issuer: ${issuer}
      subject: repo:${repo}:pull_request

  dev:
    type: azuread:ApplicationFederatedIdentityCredential
    properties:
      displayName: dev
      applicationObjectId: ${app.objectId}
      audiences:
        - ${audience}
      issuer: ${issuer}
      subject: repo:${repo}:environment:dev

  # assignment:
  #   type: azuread:AppRoleAssignment
  #   properties:
  #     resourceObjectId: ${api}
  #     appRoleId: ${permission}
  #     principalObjectId: ${sp.objectId}

  command: # REPLACE WITH NATIVE RESOURCE!
    type: command:local:Command
    properties:
      create: |
        resourceId=$(az ad sp show --id ${api} --query id --output tsv)

        method='POST'
        uri="https://graph.microsoft.com/v1.0/servicePrincipals/${sp.objectId}/appRoleAssignments"
        body="{\"principalId\":\"${sp.objectId}\",\"resourceId\":\"$resourceId\",\"appRoleId\":\"${permission}\"}"

        az rest --method $method --uri $uri --body $body

      delete: |
        resourceId=$(az ad sp show --id ${api} --query id --output tsv)

        method='GET'
        uri="https://graph.microsoft.com/v1.0/servicePrincipals/${sp.objectId}/appRoleAssignments"

        id=$(az rest --method $method --uri $uri --query "value[?resourceId == '$resourceId' && appRoleId == '${permission}'].id" --output tsv)

        method='DELETE'
        uri="https://graph.microsoft.com/v1.0/servicePrincipals/${sp.objectId}/appRoleAssignments/$id"

        az rest --method $method --uri $uri

outputs:
  tenantId: ${user.tenantId}
  clientId: ${app.applicationId}
  clientSecret: ${secret.value}
