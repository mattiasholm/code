name: sp-yaml
runtime: yaml
options:
  refresh: always

config:
  name:
    type: string
  roleId:
    type: string
  secretName:
    type: string
  secretRotation:
    type: integer
    default: 365
  audience:
    type: string
  issuer:
    type: string
  repo:
    type: string

variables:
  user:
    fn::invoke:
      function: azuread:getClientConfig
      options:
        provider: ${azuread}

  wellKnown:
    fn::invoke:
      function: azuread:getApplicationPublishedAppIds
      options:
        provider: ${azuread}

  msgraph:
    fn::invoke:
      function: azuread:getServicePrincipal
      options:
        provider: ${azuread}
      arguments:
        clientId: ${wellKnown.result["MicrosoftGraph"]}

  subscription:
    fn::invoke:
      function: azure-native:authorization:getClientConfig
      options:
        provider: ${azure-native}

  roleDefinition:
    fn::invoke:
      function: azure-native:authorization:getRoleDefinition
      options:
        provider: ${azure-native}
      arguments:
        roleDefinitionId: ${roleId}
        scope: /subscriptions/${subscription.subscriptionId}

resources:
  azuread:
    type: pulumi:providers:azuread
    options:
      version: 6.0.0
    properties:
      metadataHost: management.azure.com

  azure-native:
    type: pulumi:providers:azure-native
    options:
      version: 2.69.0

  time:
    type: pulumi:providers:time
    options:
      version: 0.1.0

  app:
    type: azuread:Application
    options:
      provider: ${azuread}
    properties:
      displayName: ${name}
      owners:
        - ${user.objectId}
      requiredResourceAccesses:
        - resourceAppId: ${wellKnown.result["MicrosoftGraph"]}
          resourceAccesses:
            - id: ${msgraph.appRoleIds["User.Read.All"]}
              type: Role

  sp:
    type: azuread:ServicePrincipal
    options:
      provider: ${azuread}
    properties:
      clientId: ${app.clientId}
      owners:
        - ${user.objectId}

  role:
    type: azure-native:authorization:RoleAssignment
    options:
      provider: ${azure-native}
    properties:
      principalId: ${sp.objectId}
      principalType: ServicePrincipal
      roleDefinitionId: ${roleDefinition.id}
      scope: /subscriptions/${subscription.subscriptionId}

  rotation:
    type: time:Rotating
    options:
      provider: ${time}
    properties:
      rotationDays: ${secretRotation}

  offset:
    type: time:Offset
    options:
      provider: ${time}
    properties:
      offsetDays: ${secretRotation}
      triggers:
        rotation: ${rotation.id}

  secret:
    type: azuread:ApplicationPassword
    options:
      provider: ${azuread}
    properties:
      displayName: ${secretName}
      applicationId: ${app.id}
      endDate: ${offset.rfc3339}
      rotateWhenChanged:
        rotation: ${rotation.id}

  main:
    type: azuread:ApplicationFederatedIdentityCredential
    options:
      provider: ${azuread}
    properties:
      displayName: main
      applicationId: ${app.id}
      audiences:
        - ${audience}
      issuer: ${issuer}
      subject: repo:${repo}:ref:refs/heads/main

  pull_request:
    type: azuread:ApplicationFederatedIdentityCredential
    options:
      provider: ${azuread}
    properties:
      displayName: pull_request
      applicationId: ${app.id}
      audiences:
        - ${audience}
      issuer: ${issuer}
      subject: repo:${repo}:pull_request

  dev:
    type: azuread:ApplicationFederatedIdentityCredential
    options:
      provider: ${azuread}
    properties:
      displayName: dev
      applicationId: ${app.id}
      audiences:
        - ${audience}
      issuer: ${issuer}
      subject: repo:${repo}:environment:dev

  assignment:
    type: azuread:AppRoleAssignment
    options:
      provider: ${azuread}
    properties:
      resourceObjectId: ${msgraph.objectId}
      appRoleId: ${msgraph.appRoleIds["User.Read.All"]}
      principalObjectId: ${sp.objectId}

outputs:
  tenantId: ${user.tenantId}
  clientId: ${app.clientId}
  clientSecret: ${secret.value}
