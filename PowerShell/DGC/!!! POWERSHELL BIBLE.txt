Select-Object DisplayName,@{Name="Device";Expression={(Get-MobileDevice -Mailbox $_.Identity).DeviceType}}
# Lista kolumner med värden från flera olika cmdlets i en output!


PS-kurs, tips från RL:
http://www.pentesteracademy.com/course?id=21

$mbx.EmailAddress.Item(1)="eum:kakers@contoso347er.onmicrosoft.com;phone-context=MySIPDialPlan.contoso347er.onmicrosoft.com"
# Hämta ut endast första Item i en Array med .Item()-metod - ekvivalent med Select -First 1!

Testkör med .Add 
$users | ForEach-Object {$_.EmailAddresses.Add("smtp:")}


Get-Mailbox -Filter
Get-CASMailbox -Filter
# Använd -Filter istället för att pipa till | Where-Object - sparar mycket tid:
Measure-Command {Get-Mailbox -Filter {ArchiveStatus -eq "Active"}}
Measure-Command {Get-Mailbox -ResultSize Unlimited | Where-Object {$_.ArchiveStatus -eq "Active"}}

Seconds           : 0
Milliseconds      : 23

Seconds           : 9
Milliseconds      : 702


$PSVersionTable.PSVersion
# Kontrollera installerad PowerShell-version!

Get-Volume
# Lista en servers volymer

Get-Disk
# Lista en servers diskar

Resize-Partition -DiskNumber 3 -PartitionNumber 1 -Size 249GB
# Ändra storlek på partition

Resize-Partition -DiskNumber 3 -PartitionNumber 1 -Size (Get-PartitionSupportedSize -DriveLetter F).SizeMax
# Ändra storlek på partition till resterande ledigt på disken

New-Alias
# Skapa alias för cmdlet

New-FileShare
# Skapa en ny SMB share

takeown /f "c:\folder\subfolder" /r
# Inte PowerShell, men smidigaste sättet att Take Ownership rekursivt!

Start [filepath, exe]
# Öppna i nytt fönster (fungerar både i cmd och PowerShell)

Psedit
# Öppna och editera en fil i ISE

pushd / popd
# Spara pwd med pushd och hoppa tillbaka till sparad katalog med popd

Set-Location
# cd equivalent

Start-Transcript / Stop-Transcript
# Starta transkript-loggning av pågående PS-session och skriv till fil. Bra vid ex. kundjobb i dokumentationssyfte

Foreach -Parallel
# Kör Foreach parallellt istället för sekventiellt - grym prestandaskillnad. Parameter ThrottleLimit finns.

Get-FileHash
# Få en hash på en fil för att verifiera att oförändrad
	
Show-Command
# Kör cmdlets i enkelt GUI med alla parametrar.

Out-File
> equivalent

Outgrid-View
# Få output grafiskt a la Excel. Ex. Get-MessageTrackingLog -ResultSize Unlimited -Start “Nov 2 2012” | Out-GridView

Get-Member
# Hämta ut Members för ett objekt, dvs. tillgängliga Methods och Properties

New-Variable -Name -Value
# Skapa ny variabel. Går förstås även att bara köra $Var = "Value".

Export-Clixml
# Exportera PS-output till XML-fil.



@{n='memberOf';e={$_.MemberOf -join ';'}}
# Splita memberOf så att man kan få ut dessa till CSV. (borde gå att lösa enklare med split?!)

Test-Connection
# Ping equivalent

Resolve-DnsName	
# nslookup equivalent

Get-NetIPConfiguration / Get-NetIPAddress
# ipconfig equivalent

$description = "Linksys Wireless-G USB"
	$adapter = Get-WmiObject Win32_NetworkAdapterConfiguration -Computer LEE-DESK |
	    Where-Object { $_.Description -match $description}
	$adapter.RenewDHCPLease()
# ipconfig /renew equivalent

Get-ChildItem
# dir / ls equivalent

New-Item -Type Directory
# mkdir equivalent

Get-NetRoute
# route print equivalent

Test-NetConnection -TraceRoute
# tracert equivalent

Get-NetTCPConnection
# netstat equivalent

Test-NetConnection -Port 80 / -CommonTCPPort HTTP
# telnet http equivalent

Get-PSDrive
New-PSDrive –Name "Q" –PSProvider FileSystem –Root "\\don-wo-fil01.emcat.com\wo" –Persist -Scope Global
# net use equivalent (Scope Global måste anges om man vill att uppmappningen skall kvarstå när PowerShell-fönstret stängs!)

Get-PSSession
# Skapa remote session 0

Get-SmbShare
New-SmbShare -Name "Share" -Path "C:\Share"
# net share equivalent

Start-Process cmd -Credential (Get-Credential)
# runas equivalent

Clear-Host / [System.Console]::Clear();
# cls equivalent

Write-Host
# echo equivalent

Read-Host
# set /p var=Prompt: equivalent

$env:COMPUTERNAME
# set equivalent

Compare-Object
# vimdiff equivalent

Select-String
# findstr equivalent

Out-Null
# > nul equivalent

-ErrorAction SilentlyContinue
# 2> nul equivalent

Get-Content
# cat equivalent

Out-Printer
# Skicka text/fil till skrivare
 
Measure-Command {}
# Mäter tiden som det tar att köra ett cmdlet

1 / 0
# Kortare variant för Boolean-parametrar istället för $True och $False

Add-Computer
# netdom join equivalent

Restart-Computer
# shutdown /r /t 0 equivalent

Stop-Computer
# shutdown /s /t 0 equivalent

Checkpoint-Computer
# Creates a system restore point on local computer

Set-SmbPathAcl
# Kopiera SMB-ACL till filsystemet!

Invoke-Command -VMName
# Kör PowerShell-scriptblocks mot Hyper-VM guest VM över VM-bussen (dvs. kräver ej nätverk!). Möjliggör ytterligare steg av automatisering, hydrering av storskaliga miljöer där man kan konfigurera upp allt, utan att ens logga in på servern!

"$env:USERDOMAIN\$env:USERNAME"
# whoami equivalent

Start-Sleep
# sleep equivalent

Select-String -CaseSensitive
# findstr equivalent

Get-Location
# pwd equivalent

Start-ADSyncSyncCycle
# On-demand DirSync - används numera istället för ScheduledTask

Start-ScheduledTask
# Starta ScheduledTask On-demand

Get-ADSyncScheduler / Set-ADSyncScheduler
# Hämta ut/redigera replikeringsfrekvens för DirSync - används numera istället för ScheduledTask

Test-DscConfiguration
# Jämför aktuell systemkonfiguration mot en Desired State Configuration-mall

$i++
# Kortkommando för att inkrementera en Int med 1

[Math]::Round(27.98374)
# Avrunda till heltal (finns även Floor / Ceiling för att avrunda uppåt respektive nedåt! Metoden Round accepterar även en 2:a parameter (x,2) för att ange hur många decimaler man önskar.

Write-Progress
# Visa progress bar i PowerShell-skript! http://www.hanselman.com/blog/ProgressBarsInPowerShell.aspx

Invoke-Item
# Öppna fil/mapp i Explorer

[Math] | Get-Member -Static
# Lista alla matematiska funktioner som finns inbyggda i PowerShell. Går även att köra för exempelvis [String] eller [DateTime]

[Math]::Sqrt(25)
# Räkna ut roten ur ett tal

[Math]::Pi
# Pi

[Math]::Pow(2,10)
# Räkna ut 2 upphöjt till 10

$variable | Get-Member
# Hämta ut alla properties och metoder som går att köra på en variabel (beroende på datatyp)

[Math]::Log([Math]::Pow([Math]::e,4))
# Exempel på nested Math (logaritmuträkning)

[Math]::Tan(45*[Math]::Pi/180)
# Exempel på nested Math (omvandla grader till radianer och beräkna Tangens)

([Math]::Sin(45*[Math]::Pi/180))/([Math]::Cos(45*[Math]::Pi/180))
# Exempel på nested Math (påvisar förhållandet mellan Tangens, Sinus och Cosinus)

$variable.GetType().FullName
# Hämta ut vilken datatyp ett objekt/variabel är

$variable = [String]1.2345
# Casta en variabel manuellt om PowerShell's automatiskt castar fel (ex. om man vill ha siffror som en sträng!)

1..10
# Kortkommando för att skriva ut talen 1 till 10 till en array (fungerar även med negativa tal och i descending order!)

3..0x1B
# Går även bra att blanda decimala och hexadecimala tal i en range

1..254 | ForEach-Object {"192.168.1.$_"}
# Generera en lista över IP-adresser i ett visst Class C-nätverk.

1..127 + 240..254
# Concat 2 arrays (ex. om DHCP scope i mitten)

[Char[]]([Int][Char]'A'..[Int][Char]'Z')
# Skriv ut hela alfabetet (A-Z) - använder sig av casting fram och tillbaka, först A->65 (Char->Int) för att kunna använda 1..3, därefter tillbaka från 65->A (Int->Char)

0x1F
# Konvertera hexadecimala tal

[Convert]::ToInt32("11110000",2)
# Konvertera binära tal

[Convert]::ToString(2)
# Konvertera till sträng

1kb / 1mb / 1gb
# Arbeta med byte-enheter native

Set-Location HKLM:
# Jobba med registret med hjälp av Set-Location / cd (fungerar även med ex. ENV: och AD:, använd Get-PSProvider för att lista alla) - Använd Get-ChildItem för att lista.

Out-Host -Paging
# more equivalent

Get-Variables
# Lista alla variabler (Get-ChildItem Variable: funkar också!)

Get-PSProvider
# Lista alla PSProviders (Registry, Alias, Environment, FileSystem, Function, Variable)

$^
# !1 equivalent (hämtar senast körda rad, equivalent med att trycka pil upp)

Get-Module -ListAvailable
# Lista alla installerade moduler (utan -ListAvailable listas endast importerade moduler i befintlig PS-session!)

[Enum]::GetValues([ConsoleColor])
# Lista alla tillgängliga textfärger (ännu roligare om man använder ihop med Get-Random!)

$variable.ToCharArray()
# Casta en String till enskilda Chars i en array som sedan kan foreachas (exempelvis om man vill skriva ut varje bokstav med fördröjning, eller alterna textfärg!)

$String.ToLower()
# Ändra till gemener

$String.ToUpper()
# Ändra till versaler

$array[3]
# Lista endast ex. tredje elementet i en array

$array[0..2]
# Lista endast subset av en array genom att definiera en range!

-Split (", ")
# Splitta string till array (delimeter kan anges om ej spaces)

-Join (", ")
# Joina en array till en sträng (ex. 

Join-Path
# Concat file paths! Main path + child path, funkar lika bra om man skriver "Filnamn" eller "\Filnamn", så man slipper tänka på att rensa undan \ om man kör Read-Host!

Split-Path
# Splitta en sökväg för att få ut ex. endast filnamn.

(Get-Credential).Password | ConvertFrom-SecureString | Out-File "C:\Temp\Password.txt"
# Lagra credentials krypterat i fil (istället för PlainText!)

$Password = Get-Content "C:\Temp\Password.txt" | ConvertTo-SecureString
# Hämta credentials krypterade i fil

throw "Felmeddelande"
# Throw a general exception (RuntimeException) i skript

throw [System.IO.FileNotFoundException] "$file not found."
# Throw a FileNotFoundException i skript

$Array.Count
# Räkna antalet element i en Array

$String.Length
# Räkna antalet Chars i en String

$Array.Count -eq 0
# Leta efter tom Array ($null funkar ej, utan man måste leta efter Count=0)

$Array = @()
# Skapar en tom Array. Verifieras med $Array.GetType()

$Hashtable = @{}
# Skapar en tom Hashtable. Verifieras med $Hashtable.GetType()

$Array += "value1"
# Lägg till element till Array, alternativt concatinera substräng till sträng

Get-TypeData
# Hämta ut alla tillgängliga datatyper / classes / namespaces

$Array.IsFixedSixe
# Metod för att kontrollera om array är FixedSize (dvs. går ej köra .Add-metod mot den)

$String = "Detta är ett `"test`""
# Escape character ` kan ex. användas för att skriva double quotes i en sträng

Write-EventLog
# Skriv till eventloggen om skript går fel etc!

appwiz.cpl
# Run-kommando för att öppna installerade program-listan.

firewall.cpl
# Run-kommando för att öppna Windows Firewall-inställningar

(Get-Date).AddDays(-7)
# Hämta ut dagens datum, minus en vecka i tiden! Funkar även med timmar, år, sekunder etc samt nestat ex. (Get-Date).AddDays(-1).AddHours(-4)

(Get-Date).Year
# Hämta ut endast nuvarande år. Funkar även med timmar, minuter, sekunder etc. Smidigare än -Format om man bara behöver ett värde!

(Get-Date).DayOfWeek
# Hämta ut nuvarande veckodag. Finns även DayOfYear

Get-Date -Format yyyy-MM-dd
# Hämta ut dagens datum, enligt eget format

New-TimeSpan -Start $Date1 -End $Date2
# Räkna ut tidsskillnad mellan två datum (går även förenkla $Date2 - $Date1)

New-ScheduledTask
# Använd PowerShell för att skapa ScheduledTasks!

$Variable.Element = "value"
# Sätt sub-element till nytt value

Resolve-DnsName emcat.com
# Namnuppslag direkt mot AD:t namn returnerar samtliga domänkontrollanter! Praktiskt vid skriptande mot AD:t och man vill få ut samtliga!

Nltest
# Tool för att testa forest trust https://technet.microsoft.com/sv-se/library/cc731935%28v=ws.10%29.aspx?f=255&MSPPError=-2147217396

(Get-ItemProperty "HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Microsoft Online Directory Sync").DisplayVersion
# Hämta ut registryvärde (alias GP), i exemplet ovan kontrolleras vilken version av DirSync / Azure AD Sync / Azure AD Connect som är installerad!

Trim()
# Trimma en sträng

TrimEnd()
# Trimma en sträng

TrimStart))
# Trimma en sträng

Split()
# Splitta en sträng

Substring()
# Hämta ut en substräng av en sträng

Replace()
# "Sök och ersätt" i en sträng


ISE-tips:
- Markera flera rader och tabba för att göra indents på alla rader samtidigt!
BÖRJA ANVÄND INDENTS I ALLA SKRIPT FORTSÄTTNINGSVIS!


# Hashtable exempel
$Hashtable = @{}
$Hashtable = @{"Fläsk" = "Äckligt"}
$Hashtable.Add("Nöt","Gott")
$Hashtable.Kyckling += "Gott"
$Hashtable.Add("Krokodil",("Gott","Äckligt"))
$Hashtable.Fisk += "Gott","Äckligt"
$Hashtable



Get-Member -Static
# Lista alla static methods för en class

::
# Call a static member method, in contrary to instance members (.Method)

[DateTimeOffset]::Now
# Hämta aktuell tid i nuvarande tidszon

[DateTime]::Now
# Hämta aktuell tid i nuvarande tidszon (mindre detaljer)

[DateTimeOffset]::UtcNow
# Hämta aktuell UTC-tid - användbart vid skript över flera världsdelar

[DateTime]::UtcNow
# Hämta aktuell UTC-tid - användbart vid skript över flera världsdelar (mindre detaljer)

(Get-Date).ToUniversalTime()
# Konvertera output från Get-Date till UTC-tid

Set-PSBreakpoint -Line 10 -Script C:\Skript.ps1
Set-PSBreakpoint -Command Get-Date
# Skapa en Breakpoint i ett skript, dvs. kör endast fram till en viss rad eller cmdlet a la Visual Studio! OBS: Går kombinera flera Breakpoints i ett skript, F5 för att hoppa vidare.

Get-PSRepository
# Lista tillgängliga repositories, default PSGallery

$String.GetHashCode()
# Returnerar en hash av en sträng/variabel/fil för att verifiera att innehållet ej har ändrats! OBS: Kollar endast innehållet, inte hela filen!

Get-FileHash C:\Temp\Testfil.txt
# Returnerar en hash av en fil, dvs. 

Invoke-RestMethod
# Anropa ett RESP API

Invoke-WebRequest
# Anropa en WebService / WebHook

ConvertTo-Json
ConvertFrom-Json
# Konvertera ex array till JSON-format

ConvertTo-Xml
ConvertFrom-Xml
# Konvertera ex array till/från XML-format

[xml]
# Casta variabel som XML-datatyp


LISTA UNIX-EQUIVALENTS:
https://www.penflip.com/powershellorg/a-unix-persons-guide-to-powershell/blob/master/commands-summary.txt




# Outputhantering:
Out-Default
Out-File
Out-GridView
Out-Host
Out-Null
Out-Printer
Out-String


# Stränghantering:
ConvertFrom-String
Convert-String
Out-String
Select-String


# Objekthantering:
ForEach-Object
Where-Object
Select-Object
Sort-Objectf
Group-Object
Measure-Object


# XML-hantering:
$RecipientInfo = New-Object psobject
$RecipientInfo | Add-Member noteproperty [CustomField] [CustomValue]


Listhantering ALTERNATIV:
Get-ChildItem | Select-Object FullName
Get-ChildItem | Format-Table FullName
Get-ChildItem | ForEach-Object FullName
Get-ChildItem | foreach FullName
Get-ChildItem | % FullName


Win + X + I
# Kortkommando för att öppna PowerShell (Win + ex 5 fungerar om man PowerShell i Taskbar, men då får du inte upp ett nytt fönster utan redan öppet!)

Ctrl + Space
# IntelliSense "display all possibilities" vid parameter-tab completion!

Win - PrintScreen
# Tar skärmdump och sparar till Pictures



RUN-KORTKOMMANDON:
http://www.primemsp.com/content/msc_Shortcuts.aspx

shutdown /r /t 0
# Starta om

shutdown /s /t 0
# Starta om

logoff
# Logga ut

control
# Starta Kontrollpanelen

appwiz.cpl
# Starta Lägg till/ta bort program

Ncpa.cpl
# Öppna Nätverksinställningar

taskmgr
# Task Manager

mstsc
# RDP

taskschd.msc
# Task Scheduler

certmgr.msc
# Certificate Manager

control mlcfg32.cpl
# Kontrollpanelen E-post

cmd
# Starta cmd-prompt

powershell
# Starta PowerShell-prompt

compmgmt.msc
# Starta Datorhantering

diskmgmt.msc
# Starta Diskhantering

iscsicpl
# Starta iSCSI Initiator

services.msc
# Starta Services-console

gpmc.msc
# Starta GPO-editor

gpedit.msc
# Starta lokal GPO-editor

rsop.msc
# Resultant Set Of Policy

regedit
# Starta Registry Editor

\\emcat.com
# Anslut till share

mmc
# Öppna tom MMC-console

notepad
# Öppna NotePad

control update
# Öppna Windows Update

desk.cpl
# Kontrollpanelen Display Settings

control printers
# Devices and printers

msinfo32
# System Information

msconfig
# System Configuration

main.cpl
# Mouse configuration

fonts
# Kontrollpanelen Typsnitt

mmsys.cpl
# Ljudinställningar

intl.cpl
# Språk-/regioninställningar

sysdm.cpl
# System Properties (byt namn/domän)

systempropertiesremote
# Remote Properties

dnsmgmt.msc
# DNS Management

dhcpmgmt.msc
# DHCP Management

perfmon.msc
# Performance Monitor

dsa.msc
# ADUC

domain.msc
# Domains & Trust

dssite.msc
# Sites & Services

devmgmt.msc
# Device Manager

eventvwr.msc
# Event Viewer

adsiedit.msc
# ADSI Edit

fsmgmt.msc
# Shared Folders - lista aktuella sessioner och öppna filer på shares!

licmgr.exe
# TS Licensing Console

secpol.msc
# Local Security Policy

servermanager
# Server Manager


WINDOWS SHORTCUTS:

https://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/keys_general.mspx?mfr=true

CTRL+C
# Copy

CTRL+X
# Cut

CTRL+V
# Paste

CTRL+Z
# Undo

SHIFT+DELETE
# Delete selected item permanently without placing the item in the Recycle Bin.

