{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "EnvironmentPrefix": {
            "type": "string"
        },
        "VmSize": {
            "type": "string"
        },
        "Capacity": {
            "type": "int"
        },
        "DurabilityLevel": {
            "type": "string"
        },
        "ReliabilityLevel": {
            "type": "string"
        },
        "AdminUsername": {
            "type": "string"
        },
        "AdminPassword": {
            "type": "securestring"
        },
        "P2SRootCertificate": {
            "type": "securestring"
        },
        "CertificateUrls": {
            "type": "array"
        },
        "AppServiceSku": {
            "type": "string"
        }
    },
    "variables": {
        "apiVersion_NSG": "2018-08-01",
        "apiVersion_VNet": "2018-08-01",
        "apiVersion_PIP": "2018-08-01",
        "apiVersion_VNGW": "2018-08-01",
        "apiVersion_Storage": "2018-07-01",
        "apiVersion_LB": "2018-08-01",
        "apiVersion_VMSS": "2018-10-01",
        "apiVersion_SF": "2018-02-01-privatepreview",
        "apiVersion_Deployments": "2018-08-01",
        "apiVersion_ServerFarms": "2018-02-01",
        "apiVersion_Sites": "2018-02-01",
        "apiVersion_Bindings": "2018-02-01",
        "apiVersion_Certificates": "2018-02-01",
        "LB_Id": "[resourceId('Microsoft.Network/loadBalancers',concat(parameters('EnvironmentPrefix'),'-LB'))]",
        "SF_MobileLogicPorts": "1810,1811,1812,1901,1902,1903,1904,2001,2002,2003,2101,2102,2103",
        "SF_TcpPort": 19000,
        "SF_HttpPort": 19080,
        "SF_ApplicationPortStart": 20000,
        "SF_ApplicationPortEnd": 30000,
        "SF_EphemeralPortStart": 49152,
        "SF_EphemeralPortEnd": 65534,
        "SF_NodeType": "N01",
        "SF_ManagementEndpoint": "[toLower(concat('https://',parameters('EnvironmentPrefix'),'-cluster.logiccenter.com',':',variables('SF_HttpPort')))]",
        "KeyVaultResourceId": "/subscriptions/9fd419d4-5a52-44a7-8d06-bda8e3a1d980/resourceGroups/LogicCenter-WE-KeyVault/providers/Microsoft.KeyVault/vaults/LogicCenter-WE-KeyVault",
        "CertificateCommonName": "*.logiccenter.com",
        "Subnets": "Gateway,SF-Frontend,SF-Backend,VM,Redis",
        "NumberOfPublicIPs": 5,
        "CenterWebApp_CustomDomain": "center.logiccenter.com",
        "CenterStageWebApp_CustomDomain": "stage.logiccenter.com",
        "DeviceWebApp_CustomDomain": "logic.app"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersion_NSG')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(parameters('EnvironmentPrefix'),'-NSG-SF-Frontend')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Allow_SF_SMB",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "445",
                            "direction": "Inbound",
                            "priority": 1000,
                            "protocol": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "Allow_SF_Cluster",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "1025-1027",
                            "direction": "Inbound",
                            "priority": 1100,
                            "protocol": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "Allow_SF_MobileLogic",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[concat(first(split(variables('SF_MobileLogicPorts'),',')),'-',last(split(variables('SF_MobileLogicPorts'),',')))]",
                            "direction": "Inbound",
                            "priority": 1200,
                            "protocol": "*",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "Allow_SF_Client",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[variables('SF_TcpPort')]",
                            "direction": "Inbound",
                            "priority": 1300,
                            "protocol": "*",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "Allow_SF_Portal",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[variables('SF_HttpPort')]",
                            "direction": "Inbound",
                            "priority": 1400,
                            "protocol": "*",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "Allow_SF_Application",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[concat(variables('SF_ApplicationPortStart'), '-', variables('SF_ApplicationPortEnd'))]",
                            "direction": "Inbound",
                            "priority": 1500,
                            "protocol": "*",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "Allow_SF_Ephemeral",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[concat(variables('SF_EphemeralPortStart'),'-',variables('SF_EphemeralPortEnd'))]",
                            "direction": "Inbound",
                            "priority": 1600,
                            "protocol": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersion_NSG')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(parameters('EnvironmentPrefix'),'-NSG-SF-Backend')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": []
            }
        },
        {
            "apiVersion": "[variables('apiVersion_NSG')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(parameters('EnvironmentPrefix'),'-NSG-VM')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": []
            }
        },
        {
            "apiVersion": "[variables('apiVersion_NSG')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(parameters('EnvironmentPrefix'),'-NSG-Redis')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": []
            }
        },
        {
            "apiVersion": "[variables('apiVersion_VNet')]",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[concat(parameters('EnvironmentPrefix'),'-VNet')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups',concat(parameters('EnvironmentPrefix'),'-NSG-SF-Frontend'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups',concat(parameters('EnvironmentPrefix'),'-NSG-SF-Backend'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups',concat(parameters('EnvironmentPrefix'),'-NSG-VM'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups',concat(parameters('EnvironmentPrefix'),'-NSG-Redis'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "copy": [
                    {
                        "name": "subnets",
                        "count": "[length(split(variables('Subnets'),','))]",
                        "input": {
                            "name": "[concat(split(variables('Subnets'),',')[copyIndex('subnets')],'Subnet')]",
                            "properties": {
                                "addressPrefix": "[concat('10.0.',copyIndex('subnets',1),'.0/24')]",
                                "networkSecurityGroup": "[if(equals(split(variables('Subnets'),',')[copyIndex('subnets')],'Gateway'),json('null'),json(concat('{\"id\": \"',resourceId('Microsoft.Network/networkSecurityGroups',concat(parameters('EnvironmentPrefix'),'-NSG-',split(variables('Subnets'),',')[copyIndex('subnets')])),'\"}')))]",
                                "serviceEndpoints": []
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersion_PIP')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(parameters('EnvironmentPrefix'),'-Gateway-PIP')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "publicIPAddressVersion": "IPv4"
            }
        },
        {
            "apiVersion": "[variables('apiVersion_VNGW')]",
            "type": "Microsoft.Network/virtualNetworkGateways",
            "name": "[concat(parameters('EnvironmentPrefix'),'-Gateway')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks',concat(parameters('EnvironmentPrefix'),'-VNet'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('EnvironmentPrefix'),'-Gateway-PIP'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "GatewayIpConfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',concat(parameters('EnvironmentPrefix'),'-VNet'),'GatewaySubnet')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('EnvironmentPrefix'),'-Gateway-PIP'))]"
                            }
                        }
                    }
                ],
                "gatewayType": "Vpn",
                "vpnType": "RouteBased",
                "sku": {
                    "name": "Basic",
                    "tier": "Basic"
                },
                "enableBgp": "false",
                "vpnClientConfiguration": {
                    "vpnClientAddressPool": {
                        "addressPrefixes": [
                            "10.2.0.0/24"
                        ]
                    },
                    "vpnClientRootCertificates": [
                        {
                            "name": "MobileLogic-P2SRootCert",
                            "properties": {
                                "publicCertData": "[parameters('P2SRootCertificate')]"
                            }
                        }
                    ],
                    "vpnClientRevokedCertificates": []
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersion_Storage')]",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {}
        },
        {
            "apiVersion": "[variables('apiVersion_PIP')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[if(greater(copyIndex(1),9),concat(parameters('EnvironmentPrefix'),'-LB-PIP',copyIndex(1)),concat(parameters('EnvironmentPrefix'),'-LB-PIP0',copyIndex(1)))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[if(greater(copyIndex(1),9),toLower(concat(parameters('EnvironmentPrefix'),'-LB-PIP',copyIndex(1))),toLower(concat(parameters('EnvironmentPrefix'),'-LB-PIP0',copyIndex(1))))]"
                },
                "publicIPAllocationMethod": "Dynamic",
                "publicIPAddressVersion": "IPv4"
            },
            "copy": {
                "name": "PIP",
                "count": "[variables('NumberOfPublicIPs')]"
            }
        },
        {
            "apiVersion": "[variables('apiVersion_LB')]",
            "type": "Microsoft.Network/loadBalancers",
            "name": "[concat(parameters('EnvironmentPrefix'),'-LB')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "PIP"
            ],
            "properties": {
                "copy": [
                    {
                        "name": "frontendIPConfigurations",
                        "count": "[variables('NumberOfPublicIPs')]",
                        "input": {
                            "name": "[if(greater(copyIndex('frontendIPConfigurations',1),9),concat(parameters('EnvironmentPrefix'),'-LB-PIP',copyIndex('frontendIPConfigurations',1)),concat(parameters('EnvironmentPrefix'),'-LB-PIP0',copyIndex('frontendIPConfigurations',1)))]",
                            "properties": {
                                "publicIPAddress": {
                                    "id": "[resourceId('Microsoft.Network/publicIPAddresses',if(greater(copyIndex('frontendIPConfigurations',1),9),concat(parameters('EnvironmentPrefix'),'-LB-PIP',copyIndex('frontendIPConfigurations',1)),concat(parameters('EnvironmentPrefix'),'-LB-PIP0',copyIndex('frontendIPConfigurations',1))))]"
                                }
                            }
                        }
                    },
                    {
                        "name": "probes",
                        "count": "[add(length(split(variables('SF_MobileLogicPorts'),',')),2)]",
                        "input": {
                            "name": "[if(equals(copyIndex('probes'),length(split(variables('SF_MobileLogicPorts'),','))),concat(parameters('EnvironmentPrefix'),'-LB-Probe-',variables('SF_TcpPort')),if(equals(copyIndex('probes'),add(length(split(variables('SF_MobileLogicPorts'),',')),1)),concat(parameters('EnvironmentPrefix'),'-LB-Probe-',variables('SF_HttpPort')),concat(parameters('EnvironmentPrefix'),'-LB-Probe-',split(variables('SF_MobileLogicPorts'),',')[copyIndex('probes')])))]",
                            "properties": {
                                "intervalInSeconds": 5,
                                "numberOfProbes": 2,
                                "port": "[if(equals(copyIndex('probes'),length(split(variables('SF_MobileLogicPorts'),','))),variables('SF_TcpPort'),if(equals(copyIndex('probes'),add(length(split(variables('SF_MobileLogicPorts'),',')),1)),variables('SF_HttpPort'),split(variables('SF_MobileLogicPorts'),',')[copyIndex('probes')]))]",
                                "protocol": "Tcp"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')]",
                        "properties": {}
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-',variables('SF_TcpPort'))]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": "[variables('SF_TcpPort')]",
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP01')))]"
                            },
                            "frontendPort": "[variables('SF_TcpPort')]",
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-',variables('SF_TcpPort'))))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-',variables('SF_HttpPort'))]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": "[variables('SF_HttpPort')]",
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP01')))]"
                            },
                            "frontendPort": "[variables('SF_HttpPort')]",
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-',variables('SF_HttpPort'))))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-1810')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 1810,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP02')))]"
                            },
                            "frontendPort": 1810,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-1810')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-1811')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 1811,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP02')))]"
                            },
                            "frontendPort": 1811,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-1811')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-1812')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 1812,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP02')))]"
                            },
                            "frontendPort": 1812,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-1812')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-1901')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 1901,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP03')))]"
                            },
                            "frontendPort": 1901,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-1901')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-1902')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 1902,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP03')))]"
                            },
                            "frontendPort": 1902,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-1902')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-1903')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 1903,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP03')))]"
                            },
                            "frontendPort": 1903,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-1903')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-1904')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 1904,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP03')))]"
                            },
                            "frontendPort": 1904,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-1904')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-2001')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 2001,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP04')))]"
                            },
                            "frontendPort": 2001,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-2001')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-2002')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 2002,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP04')))]"
                            },
                            "frontendPort": 2002,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-2002')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-2003')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 2003,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP04')))]"
                            },
                            "frontendPort": 2003,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-2003')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-2101')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 2101,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP05')))]"
                            },
                            "frontendPort": 2101,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-2101')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-2102')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 2102,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP05')))]"
                            },
                            "frontendPort": 2102,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-2102')))]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-Rule-2103')]",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                            },
                            "backendPort": 2103,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP05')))]"
                            },
                            "frontendPort": 2103,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('LB_Id'),concat('/probes/',concat(parameters('EnvironmentPrefix'),'-LB-Probe-2103')))]"
                            },
                            "protocol": "Tcp"
                        }
                    }
                ],
                "inboundNatPools": [
                    {
                        "name": "[concat(parameters('EnvironmentPrefix'),'-LB-NatPool')]",
                        "properties": {
                            "backendPort": 3389,
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('LB_Id'),concat('/frontendIPConfigurations/',concat(parameters('EnvironmentPrefix'),'-LB-PIP01')))]"
                            },
                            "frontendPortRangeStart": 3389,
                            "frontendPortRangeEnd": 4500,
                            "protocol": "Tcp"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersion_VMSS')]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[concat(parameters('EnvironmentPrefix'),'-VMSS')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks',concat(parameters('EnvironmentPrefix'),'-VNet'))]",
                "[resourceId('Microsoft.Network/loadBalancers',concat(parameters('EnvironmentPrefix'),'-LB'))]",
                "[resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-','')))]"
            ],
            "properties": {
                "upgradePolicy": {
                    "mode": "Automatic",
                    "automaticOSUpgradePolicy": {
                        "enableAutomaticOSUpgrade": true,
                        "disableAutomaticRollback": false
                    }
                },
                "virtualMachineProfile": {
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "[concat('ServiceFabricNode_',variables('SF_NodeType'))]",
                                "properties": {
                                    "type": "ServiceFabricNode",
                                    "autoUpgradeMinorVersion": true,
                                    "protectedSettings": {
                                        "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))),variables('apiVersion_Storage')).keys[0].value]",
                                        "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))),variables('apiVersion_Storage')).keys[1].value]"
                                    },
                                    "publisher": "Microsoft.Azure.ServiceFabric",
                                    "settings": {
                                        "clusterEndpoint": "[reference(resourceId('Microsoft.ServiceFabric/clusters',concat(parameters('EnvironmentPrefix'),'-Cluster'))).clusterEndpoint]",
                                        "nodeTypeRef": "[variables('SF_NodeType')]",
                                        "dataPath": "D:\\\\SvcFab",
                                        "durabilityLevel": "[parameters('DurabilityLevel')]",
                                        "enableParallelJobs": true,
                                        "nicPrefixOverride": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets',concat(parameters('EnvironmentPrefix'),'-VNet'),'SF-FrontendSubnet'),variables('apiVersion_VNet')).addressPrefix]",
                                        "certificate": {
                                            "commonNames": [
                                                "[variables('CertificateCommonName')]"
                                            ],
                                            "x509StoreName": "My"
                                        }
                                    },
                                    "typeHandlerVersion": "1.1"
                                }
                            },
                            {
                                "name": "[concat('IaaSDiagnostics_',variables('SF_NodeType'))]",
                                "properties": {
                                    "type": "IaaSDiagnostics",
                                    "autoUpgradeMinorVersion": true,
                                    "protectedSettings": {
                                        "storageAccountName": "[toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))]",
                                        "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))),variables('apiVersion_Storage')).keys[0].value]",
                                        "storageAccountEndPoint": "https://core.windows.net/"
                                    },
                                    "publisher": "Microsoft.Azure.Diagnostics",
                                    "settings": {
                                        "WadCfg": {
                                            "DiagnosticMonitorConfiguration": {
                                                "overallQuotaInMB": "50000",
                                                "EtwProviders": {
                                                    "EtwEventSourceProviderConfiguration": [
                                                        {
                                                            "provider": "Microsoft-ServiceFabric-Actors",
                                                            "scheduledTransferKeywordFilter": "1",
                                                            "scheduledTransferPeriod": "PT5M",
                                                            "DefaultEvents": {
                                                                "eventDestination": "ServiceFabricReliableActorEventTable"
                                                            }
                                                        },
                                                        {
                                                            "provider": "Microsoft-ServiceFabric-Services",
                                                            "scheduledTransferPeriod": "PT5M",
                                                            "DefaultEvents": {
                                                                "eventDestination": "ServiceFabricReliableServiceEventTable"
                                                            }
                                                        }
                                                    ],
                                                    "EtwManifestProviderConfiguration": [
                                                        {
                                                            "provider": "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8",
                                                            "scheduledTransferLogLevelFilter": "Information",
                                                            "scheduledTransferKeywordFilter": "4611686018427387904",
                                                            "scheduledTransferPeriod": "PT5M",
                                                            "DefaultEvents": {
                                                                "eventDestination": "ServiceFabricSystemEventTable"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        "StorageAccount": "[toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))]"
                                    },
                                    "typeHandlerVersion": "1.5"
                                }
                            }
                        ]
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[concat(parameters('EnvironmentPrefix'),'-NIC-0')]",
                                "properties": {
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat(parameters('EnvironmentPrefix'),'-NIC-0')]",
                                            "properties": {
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat(variables('LB_Id'),concat('/backendAddressPools/',concat(parameters('EnvironmentPrefix'),'-LB-BackendPool')))]"
                                                    }
                                                ],
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat(variables('LB_Id'),concat('/inboundNatPools/',concat(parameters('EnvironmentPrefix'),'-LB-NatPool')))]"
                                                    }
                                                ],
                                                "subnet": {
                                                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',concat(parameters('EnvironmentPrefix'),'-VNet'),'SF-FrontendSubnet')]"
                                                }
                                            }
                                        }
                                    ],
                                    "primary": true
                                }
                            }
                        ]
                    },
                    "osProfile": {
                        "adminUsername": "[parameters('AdminUsername')]",
                        "adminPassword": "[parameters('AdminPassword')]",
                        "computernamePrefix": "[variables('SF_NodeType')]",
                        "secrets": [
                            {
                                "sourceVault": {
                                    "id": "[variables('KeyVaultResourceId')]"
                                },
                                "copy": [
                                    {
                                        "name": "vaultCertificates",
                                        "count": "[length(parameters('CertificateUrls'))]",
                                        "input": {
                                            "certificateStore": "My",
                                            "certificateUrl": "[parameters('CertificateUrls')[copyIndex('vaultCertificates')]]"
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    "storageProfile": {
                        "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2016-Datacenter-with-Containers",
                            "version": "latest"
                        },
                        "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "managedDisk": {
                                "storageAccountType": "Standard_LRS"
                            }
                        }
                    }
                },
                "overprovision": false
            },
            "sku": {
                "name": "[parameters('VmSize')]",
                "capacity": "[parameters('Capacity')]",
                "tier": "Standard"
            }
        },
        {
            "apiVersion": "[variables('apiVersion_SF')]",
            "type": "Microsoft.ServiceFabric/clusters",
            "name": "[concat(parameters('EnvironmentPrefix'),'-Cluster')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-','')))]"
            ],
            "properties": {
                "addonFeatures": [
                    "DnsService"
                ],
                "certificateCommonNames": {
                    "commonNames": [
                        {
                            "certificateCommonName": "[variables('CertificateCommonName')]",
                            "certificateIssuerThumbprint": ""
                        }
                    ],
                    "x509StoreName": "My"
                },
                "clusterState": "Default",
                "diagnosticsStorageAccountConfig": {
                    "storageAccountName": "[toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))]",
                    "blobEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))),variables('apiVersion_Storage')).primaryEndpoints.blob]",
                    "protectedAccountKeyName": "StorageAccountKey1",
                    "queueEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))),variables('apiVersion_Storage')).primaryEndpoints.queue]",
                    "tableEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts',toLower(replace(concat(parameters('EnvironmentPrefix'),'storage01'),'-',''))),variables('apiVersion_Storage')).primaryEndpoints.table]"
                },
                "fabricSettings": [
                    {
                        "name": "Security",
                        "parameters": [
                            {
                                "name": "ClusterProtectionLevel",
                                "value": "EncryptAndSign"
                            }
                        ]
                    }
                ],
                "managementEndpoint": "[variables('SF_ManagementEndpoint')]",
                "nodeTypes": [
                    {
                        "name": "[variables('SF_NodeType')]",
                        "applicationPorts": {
                            "startPort": "[variables('SF_ApplicationPortStart')]",
                            "endPort": "[variables('SF_ApplicationPortEnd')]"
                        },
                        "clientConnectionEndpointPort": "[variables('SF_TcpPort')]",
                        "durabilityLevel": "[parameters('DurabilityLevel')]",
                        "ephemeralPorts": {
                            "startPort": "[variables('SF_EphemeralPortStart')]",
                            "endPort": "[variables('SF_EphemeralPortEnd')]"
                        },
                        "httpGatewayEndpointPort": "[variables('SF_HttpPort')]",
                        "isPrimary": true,
                        "vmInstanceCount": "[parameters('Capacity')]"
                    }
                ],
                "provisioningState": "Default",
                "reliabilityLevel": "[parameters('ReliabilityLevel')]",
                "upgradeMode": "Manual",
                "vmImage": "Windows"
            }
        },
        {
            "apiVersion": "[variables('apiVersion_Deployments')]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(parameters('EnvironmentPrefix'),'-AppServices')]",
            "resourceGroup": "[concat(parameters('EnvironmentPrefix'),'-AppServices')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "apiVersion": "[variables('apiVersion_ServerFarms')]",
                            "type": "Microsoft.Web/serverfarms",
                            "name": "[concat(parameters('EnvironmentPrefix'),'-AppPlan01')]",
                            "kind": "app",
                            "location": "[resourceGroup().location]",
                            "properties": {},
                            "sku": {
                                "name": "[parameters('AppServiceSku')]"
                            }
                        },
                        {
                            "apiVersion": "[variables('apiVersion_Sites')]",
                            "type": "Microsoft.Web/sites",
                            "name": "[concat(parameters('EnvironmentPrefix'),'-CenterWebApp')]",
                            "kind": "app",
                            "location": "[resourceGroup().location]",
                            "dependsOn": [
                                "[resourceId(concat(parameters('EnvironmentPrefix'),'-AppServices'),'Microsoft.Web/serverfarms',concat(parameters('EnvironmentPrefix'),'-AppPlan01'))]"
                            ],
                            "properties": {
                                "serverFarmId": "[resourceId(concat(parameters('EnvironmentPrefix'),'-AppServices'),'Microsoft.Web/serverfarms',concat(parameters('EnvironmentPrefix'),'-AppPlan01'))]"
                            },
                            "identity": {
                                "type": "SystemAssigned"
                            }
                        },
                        {
                            "apiVersion": "[variables('apiVersion_Sites')]",
                            "type": "Microsoft.Web/sites",
                            "name": "[concat(parameters('EnvironmentPrefix'),'-CenterStageWebApp')]",
                            "kind": "app",
                            "location": "[resourceGroup().location]",
                            "dependsOn": [
                                "[resourceId(concat(parameters('EnvironmentPrefix'),'-AppServices'),'Microsoft.Web/serverfarms',concat(parameters('EnvironmentPrefix'),'-AppPlan01'))]"
                            ],
                            "properties": {
                                "serverFarmId": "[resourceId(concat(parameters('EnvironmentPrefix'),'-AppServices'),'Microsoft.Web/serverfarms',concat(parameters('EnvironmentPrefix'),'-AppPlan01'))]"
                            },
                            "identity": {
                                "type": "SystemAssigned"
                            }
                        },
                        {
                            "apiVersion": "[variables('apiVersion_Sites')]",
                            "type": "Microsoft.Web/sites",
                            "name": "[concat(parameters('EnvironmentPrefix'),'-DeviceWebApp')]",
                            "kind": "app",
                            "location": "[resourceGroup().location]",
                            "dependsOn": [
                                "[resourceId(concat(parameters('EnvironmentPrefix'),'-AppServices'),'Microsoft.Web/serverfarms',concat(parameters('EnvironmentPrefix'),'-AppPlan01'))]"
                            ],
                            "properties": {
                                "serverFarmId": "[resourceId(concat(parameters('EnvironmentPrefix'),'-AppServices'),'Microsoft.Web/serverfarms',concat(parameters('EnvironmentPrefix'),'-AppPlan01'))]"
                            },
                            "identity": {
                                "type": "SystemAssigned"
                            }
                        },
                        {
                            "apiVersion": "[variables('apiVersion_Bindings')]",
                            "type": "Microsoft.Web/sites/hostnameBindings",
                            "name": "[concat(parameters('EnvironmentPrefix'),'-CenterWebApp','/',variables('CenterWebApp_CustomDomain'))]",
                            "location": "[resourceGroup().location]",
                            "dependsOn": [
                                "[concat(parameters('EnvironmentPrefix'),'-CenterWebApp')]"
                            ],
                            "properties": {
                                //"sslState": "SniEnabled",
                                //"thumbprint": "[reference(resourceId('Microsoft.Web/certificates', 'LogicCenter-CER')).Thumbprint]"
                            }
                        },
                        {
                            "apiVersion": "[variables('apiVersion_Bindings')]",
                            "type": "Microsoft.Web/sites/hostnameBindings",
                            "name": "[concat(parameters('EnvironmentPrefix'),'-CenterStageWebApp','/',variables('CenterStageWebApp_CustomDomain'))]",
                            "location": "[resourceGroup().location]",
                            "dependsOn": [
                                "[concat(parameters('EnvironmentPrefix'),'-CenterStageWebApp')]"
                            ],
                            "properties": {
                                //"sslState": "SniEnabled",
                                //"thumbprint": "[reference(resourceId('Microsoft.Web/certificates', 'LogicCenter-CER')).Thumbprint]"
                            }
                        },
                        {
                            "apiVersion": "[variables('apiVersion_Bindings')]",
                            "type": "Microsoft.Web/sites/hostnameBindings",
                            "name": "[concat(parameters('EnvironmentPrefix'),'-DeviceWebApp','/',variables('DeviceWebApp_CustomDomain'))]",
                            "location": "[resourceGroup().location]",
                            "dependsOn": [
                                "[concat(parameters('EnvironmentPrefix'),'-DeviceWebApp')]"
                            ],
                            "properties": {}
                        } //,
                        /*
                        {
                            "apiVersion": "[variables('apiVersion_Certificates')]",
                            "type": "Microsoft.Web/certificates",
                            "name": "LogicCenter-CER",
                            "location": "[resourceGroup().location]",
                            "dependsOn": [
                                "[concat('Microsoft.Web/sites/',parameters('EnvironmentPrefix'),'-CenterWebApp')]",
                                "[concat('Microsoft.Web/sites/',parameters('EnvironmentPrefix'),'-CenterStageWebApp')]"
                            ],
                            "properties": {
                                "keyVaultId": "[variables('KeyVaultResourceId')]",
                                "keyVaultSecretName": "LogicCenter-Secret"
                            }
                        }
                        */
                    ]
                }
            }
        }
    ],
    "outputs": {
        "ServiceFabricPortal": {
            "value": "[variables('SF_ManagementEndpoint')]",
            "type": "string"
        },
        "FQDN_PIP01": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('EnvironmentPrefix'),'-LB-PIP01'))).dnsSettings.fqdn]",
            "type": "string"
        },
        "FQDN_PIP02": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('EnvironmentPrefix'),'-LB-PIP02'))).dnsSettings.fqdn]",
            "type": "string"
        },
        "FQDN_PIP03": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('EnvironmentPrefix'),'-LB-PIP03'))).dnsSettings.fqdn]",
            "type": "string"
        },
        "FQDN_PIP04": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('EnvironmentPrefix'),'-LB-PIP04'))).dnsSettings.fqdn]",
            "type": "string"
        },
        "FQDN-PIP05": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('EnvironmentPrefix'),'-LB-PIP05'))).dnsSettings.fqdn]",
            "type": "string"
        }
    }
}