{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "VNet_AddressSpace": {
            "type": "string"
        },
        "ASE_Location": {
            "type": "string"
        },
        "ASE_Sku": {
            "type": "string",
            "allowedValues": [
                "I1",
                "I2",
                "I3"
            ]
        },
        "ASE_DefaultCapacity": {
            "type": "int",
            "minValue": 1,
            "maxValue": 10
        },
        "SQL_Sku": {
            "type": "string",
            "allowedValues": [
                "S1",
                "S2",
                "S3",
                "S4",
                "P1"
            ]
        },
        "SQL_Username": {
            "type": "string"
        },
        "SQL_Password": {
            "type": "securestring"
        }
    },
    "variables": {
        "apiVersion_KeyVault": "2018-02-14-preview",
        "apiVersion_Network": "2018-12-01",
        "apiVersion_Storage": "2018-11-01",
        "apiVersion_Web": "2019-01-01",
        "apiVersion_Sql": "2015-05-01-preview",
        "SubnetRange": "[replace(parameters('VNet_AddressSpace'),'/16','/24')]",
        "Subnets": "ASE",
        "StorageSku": "Standard_LRS",
        "SQL_Collation": "Finnish_Swedish_CI_AS"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersion_Network')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(resourceGroup().name,'-NSG-',split(variables('Subnets'),',')[0])]",
            "location": "[resourceGroup().location]",
            "tags": "[resourceGroup().tags]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Deny_Inbound_All",
                        "properties": {
                            "access": "Deny",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "*",
                            "protocol": "*",
                            "priority": 4096
                        }
                    },
                    {
                        "name": "Allow_Outbound_AzureKeyVault",
                        "properties": {
                            "access": "Allow",
                            "direction": "Outbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "AzureKeyVault",
                            "destinationPortRange": "443",
                            "protocol": "TCP",
                            "priority": 1000
                        }
                    },
                    {
                        "name": "Allow_Outbound_Storage",
                        "properties": {
                            "access": "Allow",
                            "direction": "Outbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "Storage",
                            "destinationPortRange": "443",
                            "protocol": "TCP",
                            "priority": 1100
                        }
                    },
                    {
                        "name": "Deny_Outbound_All",
                        "properties": {
                            "access": "Deny",
                            "direction": "Outbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "*",
                            "protocol": "*",
                            "priority": 4096
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersion_Network')]",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[concat(resourceGroup().name,'-VNet01')]",
            "location": "[resourceGroup().location]",
            "tags": "[resourceGroup().tags]",
            "dependsOn": [
                "[concat(resourceGroup().name,'-NSG-',split(variables('Subnets'),',')[0])]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('VNet_AddressSpace')]"
                    ]
                },
                "copy": [
                    {
                        "name": "subnets",
                        "count": "[length(split(variables('Subnets'),','))]",
                        "input": {
                            "name": "[concat(split(variables('Subnets'),',')[copyIndex('subnets')],'Subnet')]",
                            "properties": {
                                "addressPrefix": "[concat(split(variables('SubnetRange'),'.')[0],'.',split(variables('SubnetRange'),'.')[2],'.',copyIndex('subnets',1),'.',split(variables('SubnetRange'),'.')[3])]",
                                "networkSecurityGroup": {
                                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups',concat(resourceGroup().name,'-NSG-',split(variables('Subnets'),',')[copyIndex('subnets')]))]"
                                },
                                "serviceEndpoints": [
                                    {
                                        "service": "Microsoft.KeyVault"
                                    },
                                    {
                                        "service": "Microsoft.Storage"
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "apiVersion": "[variables('apiVersion_Network')]",
                    "type": "subnets",
                    "name": "GatewaySubnet",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[concat(resourceGroup().name,'-VNet01')]"
                    ],
                    "properties": {
                        "addressPrefix": "[concat(split(variables('SubnetRange'),'.')[0],'.',split(variables('SubnetRange'),'.')[2],'.','0','.',split(variables('SubnetRange'),'.')[3])]"
                    }
                }
            ]
        },
        {
            "apiVersion": "[variables('apiVersion_Storage')]",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[ToLower(replace(concat(resourceGroup().name,'-Storage01'),'-',''))]",
            "location": "[resourceGroup().location]",
            "tags": "[resourceGroup().tags]",
            "dependsOn": [
                "[concat(resourceGroup().name,'-VNet01')]"
            ],
            "sku": {
                "name": "[variables('StorageSku')]"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "None",
                    "defaultAction": "Deny",
                    "ipRules": [],
                    "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',concat(resourceGroup().name,'-VNet01'),concat(split(variables('Subnets'),',')[0],'Subnet'))]",
                            "action": "Allow"
                        }
                    ]
                },
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "apiVersion": "[variables('apiVersion_KeyVault')]",
            "type": "Microsoft.KeyVault/vaults",
            "name": "[concat(resourceGroup().name,'-Vault01')]",
            "location": "[resourceGroup().location]",
            "tags": "[resourceGroup().tags]",
            "dependsOn": [
                "[concat(resourceGroup().name,'-VNet01')]"
            ],
            "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "accessPolicies": [],
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny",
                    "ipRules": [],
                    "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',concat(resourceGroup().name,'-VNet01'),concat(split(variables('Subnets'),',')[0],'Subnet'))]",
                            "action": "Allow"
                        }
                    ]
                }
            }
        },
        /*{
            "apiVersion": "[variables('apiVersion_Web')]",
            "type": "Microsoft.Web/hostingEnvironments",
            "name": "[concat(resourceGroup().name,'-ASE01')]",
            "location": "[parameters('ASE_Location')]",
            "tags": "[resourceGroup().tags]",
            "dependsOn": [
                "[concat(resourceGroup().name,'-VNet01')]"
            ],
            "kind": "ASEV2",
            "properties": {
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',concat(resourceGroup().name,'-VNet01'),concat(split(variables('Subnets'),',')[0],'Subnet'))]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersion_Web')]",
            "type": "Microsoft.Web/serverfarms",
            "name": "[concat(resourceGroup().name,'-AppPlan01')]",
            "location": "[resourceGroup().location]",
            "tags": "[resourceGroup().tags]",
            "dependsOn": [
                "[concat(resourceGroup().name,'-ASE01')]"
            ],
            "properties": {
                //"name": "[parameters('appServicePlanName')]",
                "hostingEnvironmentProfile": {
                    "id": "[concat(resourceGroup().name,'-ASE01')]"
                }
            },
            "sku": {
                "name": "[parameters('ASE_Sku')]",
                "capacity": "[parameters('ASE_DefaultCapacity')]"
            }
        },
        {
            "apiVersion": "[variables('apiVersion_Web')]",
            "type": "Microsoft.Web/sites",
            "name": "[concat(resourceGroup().name,'-App01')]",
            "location": "[resourceGroup().location]",
            "tags": "[resourceGroup().tags]",
            "dependsOn": [
                "[concat(resourceGroup().name,'-AppPlan01')]"
            ],
            "properties": {
                "serverFarmId": "[concat(resourceGroup().name,'-AppPlan01')]",
                "hostingEnvironmentProfile": {
                    "id": "[concat(resourceGroup().name,'-ASE01')]"
                }
            }
        },*/
        {
            "apiVersion": "[variables('apiVersion_Sql')]",
            "type": "Microsoft.Sql/servers",
            "name": "[concat(resourceGroup().name,'-SqlServer01')]",
            "location": "[resourceGroup().location]",
            "tags": "[resourceGroup().tags]",
            "properties": {
                "administratorLogin": "[parameters('SQL_Username')]",
                "administratorLoginPassword": "[parameters('SQL_Password')]"
            },
            "resources": [
                {
                    "apiVersion": "[variables('apiVersion_Sql')]",
                    "type": "virtualNetworkRules",
                    "name": "virtualNetworkRules",
                    "location": "[resourceGroup().location]",
                    "tags": "[resourceGroup().tags]",
                    "dependsOn": [
                        "[concat(resourceGroup().name,'-SqlServer01')]",
                        "[concat(resourceGroup().name,'-VNet01')]"
                    ],
                    "properties": {
                        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',concat(resourceGroup().name,'-VNet01'),concat(split(variables('Subnets'),',')[0],'Subnet'))]"
                    }
                },
                {
                    "apiVersion": "[variables('apiVersion_Sql')]",
                    "type": "databases",
                    "name": "[concat(resourceGroup().name,'-SqlDb01')]",
                    "location": "[resourceGroup().location]",
                    "tags": "[resourceGroup().tags]",
                    "dependsOn": [
                        "[concat(resourceGroup().name,'-SqlServer01')]"
                    ],
                    "sku": {
                        "name": "[parameters('SQL_Sku')]"
                    },
                    "properties": {
                        "collation": "[variables('SqlCollation')]"
                    }
                }
            ]
        }
    ],
    "outputs": {}
}